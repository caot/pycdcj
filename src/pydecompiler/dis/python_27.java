package pydecompiler.dis;

import pydecompiler.dis.Pyc.Opcode;


public class python_27 {

  static Opcode python_27_map(int id)
  {
      switch (id) {
      case 0: return Opcode.STOP_CODE;
    case 1:
      return Opcode.POP_TOP;
    case 2:
      return Opcode.ROT_TWO;
    case 3:
      return Opcode.ROT_THREE;
    case 4:
      return Opcode.DUP_TOP;
    case 5:
      return Opcode.ROT_FOUR;
    case 9:
      return Opcode.NOP;
    case 10:
      return Opcode.UNARY_POSITIVE;
    case 11:
      return Opcode.UNARY_NEGATIVE;
    case 12:
      return Opcode.UNARY_NOT;
    case 13:
      return Opcode.UNARY_CONVERT;
    case 15:
      return Opcode.UNARY_INVERT;
    case 19:
      return Opcode.BINARY_POWER;
    case 20:
      return Opcode.BINARY_MULTIPLY;
    case 21:
      return Opcode.BINARY_DIVIDE;
    case 22:
      return Opcode.BINARY_MODULO;
    case 23:
      return Opcode.BINARY_ADD;
    case 24:
      return Opcode.BINARY_SUBTRACT;
    case 25:
      return Opcode.BINARY_SUBSCR;
    case 26:
      return Opcode.BINARY_FLOOR_DIVIDE;
    case 27:
      return Opcode.BINARY_TRUE_DIVIDE;
    case 28:
      return Opcode.INPLACE_FLOOR_DIVIDE;
    case 29:
      return Opcode.INPLACE_TRUE_DIVIDE;
    case 30:
      return Opcode.SLICE_0;
    case 31:
      return Opcode.SLICE_1;
    case 32:
      return Opcode.SLICE_2;
    case 33:
      return Opcode.SLICE_3;
    case 40:
      return Opcode.STORE_SLICE_0;
    case 41:
      return Opcode.STORE_SLICE_1;
    case 42:
      return Opcode.STORE_SLICE_2;
    case 43:
      return Opcode.STORE_SLICE_3;
    case 50:
      return Opcode.DELETE_SLICE_0;
    case 51:
      return Opcode.DELETE_SLICE_1;
    case 52:
      return Opcode.DELETE_SLICE_2;
    case 53:
      return Opcode.DELETE_SLICE_3;
    case 54:
      return Opcode.STORE_MAP;
    case 55:
      return Opcode.INPLACE_ADD;
    case 56:
      return Opcode.INPLACE_SUBTRACT;
    case 57:
      return Opcode.INPLACE_MULTIPLY;
    case 58:
      return Opcode.INPLACE_DIVIDE;
    case 59:
      return Opcode.INPLACE_MODULO;
    case 60:
      return Opcode.STORE_SUBSCR;
    case 61:
      return Opcode.DELETE_SUBSCR;
    case 62:
      return Opcode.BINARY_LSHIFT;
    case 63:
      return Opcode.BINARY_RSHIFT;
    case 64:
      return Opcode.BINARY_AND;
    case 65:
      return Opcode.BINARY_XOR;
    case 66:
      return Opcode.BINARY_OR;
    case 67:
      return Opcode.INPLACE_POWER;
    case 68:
      return Opcode.GET_ITER;
    case 70:
      return Opcode.PRINT_EXPR;
    case 71:
      return Opcode.PRINT_ITEM;
    case 72:
      return Opcode.PRINT_NEWLINE;
    case 73:
      return Opcode.PRINT_ITEM_TO;
    case 74:
      return Opcode.PRINT_NEWLINE_TO;
    case 75:
      return Opcode.INPLACE_LSHIFT;
    case 76:
      return Opcode.INPLACE_RSHIFT;
    case 77:
      return Opcode.INPLACE_AND;
    case 78:
      return Opcode.INPLACE_XOR;
    case 79:
      return Opcode.INPLACE_OR;
    case 80:
      return Opcode.BREAK_LOOP;
    case 81:
      return Opcode.WITH_CLEANUP;
    case 82:
      return Opcode.LOAD_LOCALS;
    case 83:
      return Opcode.RETURN_VALUE;
    case 84:
      return Opcode.IMPORT_STAR;
    case 85:
      return Opcode.EXEC_STMT;
    case 86:
      return Opcode.YIELD_VALUE;
    case 87:
      return Opcode.POP_BLOCK;
    case 88:
      return Opcode.END_FINALLY;
    case 89:
      return Opcode.BUILD_CLASS;
    case 90:
      return Opcode.STORE_NAME_A;
    case 91:
      return Opcode.DELETE_NAME_A;
    case 92:
      return Opcode.UNPACK_SEQUENCE_A;
    case 93:
      return Opcode.FOR_ITER_A;
    case 94:
      return Opcode.LIST_APPEND_A;
    case 95:
      return Opcode.STORE_ATTR_A;
    case 96:
      return Opcode.DELETE_ATTR_A;
    case 97:
      return Opcode.STORE_GLOBAL_A;
    case 98:
      return Opcode.DELETE_GLOBAL_A;
    case 99:
      return Opcode.DUP_TOPX_A;
    case 100:
      return Opcode.LOAD_CONST_A;
    case 101:
      return Opcode.LOAD_NAME_A;
    case 102:
      return Opcode.BUILD_TUPLE_A;
    case 103:
      return Opcode.BUILD_LIST_A;
    case 104:
      return Opcode.BUILD_SET_A;
    case 105:
      return Opcode.BUILD_MAP_A;
    case 106:
      return Opcode.LOAD_ATTR_A;
    case 107:
      return Opcode.COMPARE_OP_A;
    case 108:
      return Opcode.IMPORT_NAME_A;
    case 109:
      return Opcode.IMPORT_FROM_A;
    case 110:
      return Opcode.JUMP_FORWARD_A;
    case 111:
      return Opcode.JUMP_IF_FALSE_OR_POP_A;
    case 112:
      return Opcode.JUMP_IF_TRUE_OR_POP_A;
    case 113:
      return Opcode.JUMP_ABSOLUTE_A;
    case 114:
      return Opcode.POP_JUMP_IF_FALSE_A;
    case 115:
      return Opcode.POP_JUMP_IF_TRUE_A;
    case 116:
      return Opcode.LOAD_GLOBAL_A;
    case 119:
      return Opcode.CONTINUE_LOOP_A;
    case 120:
      return Opcode.SETUP_LOOP_A;
    case 121:
      return Opcode.SETUP_EXCEPT_A;
    case 122:
      return Opcode.SETUP_FINALLY_A;
    case 124:
      return Opcode.LOAD_FAST_A;
    case 125:
      return Opcode.STORE_FAST_A;
    case 126:
      return Opcode.DELETE_FAST_A;
    case 130:
      return Opcode.RAISE_VARARGS_A;
    case 131:
      return Opcode.CALL_FUNCTION_A;
    case 132:
      return Opcode.MAKE_FUNCTION_A;
    case 133:
      return Opcode.BUILD_SLICE_A;
    case 134:
      return Opcode.MAKE_CLOSURE_A;
    case 135:
      return Opcode.LOAD_CLOSURE_A;
    case 136:
      return Opcode.LOAD_DEREF_A;
    case 137:
      return Opcode.STORE_DEREF_A;
    case 140:
      return Opcode.CALL_FUNCTION_VAR_A;
    case 141:
      return Opcode.CALL_FUNCTION_KW_A;
    case 142:
      return Opcode.CALL_FUNCTION_VAR_KW_A;
    case 143:
      return Opcode.SETUP_WITH_A;
    case 145:
      return Opcode.EXTENDED_ARG_A;
    case 146:
      return Opcode.SET_ADD_A;
    case 147:
      return Opcode.MAP_ADD_A;
    default:
      return Opcode.PYC_INVALID_OPCODE;
      }
  }

  static int python_27_unmap(Opcode id)
  {
      switch (id) {
    case BINARY_ADD:
      return 23;
    case BINARY_AND:
      return 64;
    case BINARY_DIVIDE:
      return 21;
    case BINARY_FLOOR_DIVIDE:
      return 26;
    case BINARY_LSHIFT:
      return 62;
    case BINARY_MODULO:
      return 22;
    case BINARY_MULTIPLY:
      return 20;
    case BINARY_OR:
      return 66;
    case BINARY_POWER:
      return 19;
    case BINARY_RSHIFT:
      return 63;
    case BINARY_SUBSCR:
      return 25;
    case BINARY_SUBTRACT:
      return 24;
    case BINARY_TRUE_DIVIDE:
      return 27;
    case BINARY_XOR:
      return 65;
    case BREAK_LOOP:
      return 80;
    case BUILD_CLASS:
      return 89;
    case BUILD_LIST_A:
      return 103;
    case BUILD_MAP_A:
      return 105;
    case BUILD_SET_A:
      return 104;
    case BUILD_SLICE_A:
      return 133;
    case BUILD_TUPLE_A:
      return 102;
    case CALL_FUNCTION_A:
      return 131;
    case CALL_FUNCTION_KW_A:
      return 141;
    case CALL_FUNCTION_VAR_A:
      return 140;
    case CALL_FUNCTION_VAR_KW_A:
      return 142;
    case COMPARE_OP_A:
      return 107;
    case CONTINUE_LOOP_A:
      return 119;
    case DELETE_ATTR_A:
      return 96;
    case DELETE_FAST_A:
      return 126;
    case DELETE_GLOBAL_A:
      return 98;
    case DELETE_NAME_A:
      return 91;
    case DELETE_SLICE_0:
      return 50;
    case DELETE_SLICE_1:
      return 51;
    case DELETE_SLICE_2:
      return 52;
    case DELETE_SLICE_3:
      return 53;
    case DELETE_SUBSCR:
      return 61;
    case DUP_TOP:
      return 4;
    case DUP_TOPX_A:
      return 99;
    case END_FINALLY:
      return 88;
    case EXEC_STMT:
      return 85;
    case EXTENDED_ARG_A:
      return 145;
    case FOR_ITER_A:
      return 93;
    case GET_ITER:
      return 68;
    case IMPORT_FROM_A:
      return 109;
    case IMPORT_NAME_A:
      return 108;
    case IMPORT_STAR:
      return 84;
    case INPLACE_ADD:
      return 55;
    case INPLACE_AND:
      return 77;
    case INPLACE_DIVIDE:
      return 58;
    case INPLACE_FLOOR_DIVIDE:
      return 28;
    case INPLACE_LSHIFT:
      return 75;
    case INPLACE_MODULO:
      return 59;
    case INPLACE_MULTIPLY:
      return 57;
    case INPLACE_OR:
      return 79;
    case INPLACE_POWER:
      return 67;
    case INPLACE_RSHIFT:
      return 76;
    case INPLACE_SUBTRACT:
      return 56;
    case INPLACE_TRUE_DIVIDE:
      return 29;
    case INPLACE_XOR:
      return 78;
    case JUMP_ABSOLUTE_A:
      return 113;
    case JUMP_FORWARD_A:
      return 110;
    case JUMP_IF_FALSE_OR_POP_A:
      return 111;
    case JUMP_IF_TRUE_OR_POP_A:
      return 112;
    case LIST_APPEND_A:
      return 94;
    case LOAD_ATTR_A:
      return 106;
    case LOAD_CLOSURE_A:
      return 135;
    case LOAD_CONST_A:
      return 100;
    case LOAD_DEREF_A:
      return 136;
    case LOAD_FAST_A:
      return 124;
    case LOAD_GLOBAL_A:
      return 116;
    case LOAD_LOCALS:
      return 82;
    case LOAD_NAME_A:
      return 101;
    case MAKE_CLOSURE_A:
      return 134;
    case MAKE_FUNCTION_A:
      return 132;
    case MAP_ADD_A:
      return 147;
    case NOP:
      return 9;
    case POP_BLOCK:
      return 87;
    case POP_JUMP_IF_FALSE_A:
      return 114;
    case POP_JUMP_IF_TRUE_A:
      return 115;
    case POP_TOP:
      return 1;
    case PRINT_EXPR:
      return 70;
    case PRINT_ITEM:
      return 71;
    case PRINT_ITEM_TO:
      return 73;
    case PRINT_NEWLINE:
      return 72;
    case PRINT_NEWLINE_TO:
      return 74;
    case RAISE_VARARGS_A:
      return 130;
    case RETURN_VALUE:
      return 83;
    case ROT_FOUR:
      return 5;
    case ROT_THREE:
      return 3;
    case ROT_TWO:
      return 2;
    case SETUP_EXCEPT_A:
      return 121;
    case SETUP_FINALLY_A:
      return 122;
    case SETUP_LOOP_A:
      return 120;
    case SETUP_WITH_A:
      return 143;
    case SET_ADD_A:
      return 146;
    case SLICE_0:
      return 30;
    case SLICE_1:
      return 31;
    case SLICE_2:
      return 32;
    case SLICE_3:
      return 33;
    case STOP_CODE:
      return 0;
    case STORE_ATTR_A:
      return 95;
    case STORE_DEREF_A:
      return 137;
    case STORE_FAST_A:
      return 125;
    case STORE_GLOBAL_A:
      return 97;
    case STORE_MAP:
      return 54;
    case STORE_NAME_A:
      return 90;
    case STORE_SLICE_0:
      return 40;
    case STORE_SLICE_1:
      return 41;
    case STORE_SLICE_2:
      return 42;
    case STORE_SLICE_3:
      return 43;
    case STORE_SUBSCR:
      return 60;
    case UNARY_CONVERT:
      return 13;
    case UNARY_INVERT:
      return 15;
    case UNARY_NEGATIVE:
      return 11;
    case UNARY_NOT:
      return 12;
    case UNARY_POSITIVE:
      return 10;
    case UNPACK_SEQUENCE_A:
      return 92;
    case WITH_CLEANUP:
      return 81;
    case YIELD_VALUE:
      return 86;
      default: return -1;
      }
  }

}
